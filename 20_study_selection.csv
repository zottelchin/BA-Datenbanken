id,author,title,doi,year,abstract,url
1,"Longo, Justin and Kelley, Tanya M.",Use of GitHub as a Platform for Open Collaboration on Text Documents,10.1145/2788993.2789838,2015,"Recently, researchers are paying attention to the use of the software development and code-hosting web service GitHub for other collaborative purposes, including a class of activity referred to as document, text, or prose collaboration. These alternative uses of GitHub as a platform for sharing non-code artifacts represent an important modification in the practice of open collaboration. We survey cases where GitHub has been used to facilitate collaboration on non-code outputs, identify its strengths and weaknesses when used in this mode, and propose conditions for successful collaborations on co-created text documents.",https://doi.org/10.1145/2788993.2789838
2,"Feliciano, Joseph and Storey, Margaret-Anne and Zagalsky, Alexey",Student Experiences Using GitHub in Software Engineering Courses: A Case Study,10.1145/2889160.2889195,2016,"GitHub has been embraced by the software development community as an important social platform for managing software projects and to support collaborative development. More recently, educators have begun to adopt it for hosting course content and student assignments. From our previous research, we found that educators leverage GitHub's collaboration and transparency features to create, reuse and remix course materials, and to encourage student contributions and monitor student activity on assignments and projects. However, our previous research did not consider the student perspective.In this paper, we present a case study where GitHub is used as a learning platform for two software engineering courses. We gathered student perspectives on how the use of GitHub in their courses might benefit them and to identify the challenges they may face. The findings from our case study indicate that software engineering students do benefit from GitHub's transparent and open workflow. However, students were concerned that since GitHub is not inherently an educational tool, it lacks key features important for education and poses learning and privacy concerns. Our findings provide recommendations for designers on how tools such as GitHub can be used to improve software engineering education, and also point to recommendations for instructors on how to use it more effectively in their courses.",https://doi.org/10.1145/2889160.2889195
3,"Neto, Casimiro Conde Marco and de O. Barros, M\'arcio",A Structured Survey on the Usage of the Issue Tracking System Provided by the GitHub Platform,10.1145/3132498.3134110,2017,"Issue tracking systems help software development teams in identifying problems to be solved and new features to be added to a software system. In this paper, we replicate and extend a study carried out in 2013 on the usage of the issue tracking system provided by the GitHub platform. The replication aims at determining whether the results observed four years ago are still valid. The extension seeks to analyze how often issues are terminated by commits to the version control system and understand whether this feature allows developers to relate an issue to the source code modules that were changed to resolve it. We conclude that the results of the previous study remain valid and that issues closed by commits are uncommon (about 4% of our sample) and often linked to technical aspects of the project.",https://doi.org/10.1145/3132498.3134110
4,"Zhang, Yang and Wang, Huaimin and Yin, Gang and Wang, Tao and Yu, Yue",Exploring the Use of @-Mention to Assist Software Development in GitHub,10.1145/2875913.2875914,2015,"Recently, many researches propose that social media tools can promote the collaboration among developers, which are beneficial to the software development. Nevertheless, there is little empirical evidence to confirm that using @-mention has indeed a beneficial impact on the issues in GitHub. In this paper, we analyze the data from GitHub and give some insights on how @-mention is used in the issues (general-issues and pull-requests). Our statistical results indicate that, @-mention attracts more participants and tends to be used in the difficult issues. @-mention favors the solving process of issues by enlarging the visibility of issues and facilitating the developers' collaboration. In addition to this global study, our study also build a @-network based on the @-mention database we extract. Through the @-network, we can mine the relationships and characteristics of developers in GitHub's issues.",https://doi.org/10.1145/2875913.2875914
10,"Borges, Hudson and Brito, Rodrigo and Valente, Marco Tulio",Beyond Textual Issues: Understanding the Usage and Impact of GitHub Reactions,10.1145/3350768.3350788,2019,"Recently, GitHub introduced a new social feature, named reactions, which are ""pictorial characters"" similar to emoji symbols widely used nowadays in text-based communications. Particularly, GitHub users can use a pre-defined set of such symbols to react to issues and pull requests. However, little is known about the real usage and impact of GitHub reactions. In this paper, we analyze the reactions provided by developers to more than 2.5 million issues and 9.7 million issue comments, in order to answer an extensive list of nine research questions about the usage and adoption of reactions. We show that reactions are being increasingly used by open source developers. Moreover, we also found that issues with reactions usually take more time to be handled and have longer discussions.",https://doi.org/10.1145/3350768.3350788
11,"Glassey, Richard",Managing Assignment Feedback via Issue Tracking,10.1145/3197091.3205819,2018,"This poster provides insight into the use of an issue tracker for the management of assignment feedback within an introductory course in computer science (CS). Students have made use of Github for three successive years, and the issue tracker has become one of the key mechanisms for managing formative feedback. This approach has yielded three key benefits: increased student engagement in their own feedback; provided an early experience of an authentic and industry desirable communication skill; and created a means to oversee and learn from feedback discussions for the teaching team.",https://doi.org/10.1145/3197091.3205819
12,"K\""afer, Verena and Graziotin, Daniel and Bogicevic, Ivan and Wagner, Stefan and Ramadani, Jasmin",Communication in Open-Source Projects-End of the e-Mail Era?,10.1145/3183440.3194951,2018,"Communication is essential in software engineering. Especially in distributed open-source teams, communication needs to be supported by channels including mailing lists, forums, issue trackers, and chat systems. Yet, we do not have a clear understanding of which communication channels stakeholders in open-source projects use. In this study, we fill the knowledge gap by investigating a statistically representative sample of 400 GitHub projects. We discover the used communication channels by regular expressions on project data. We show that (1) half of the GitHub projects use observable communication channels; (2) GitHub Issues, e-mail addresses, and the modern chat system Gitter are the most common channels; (3) mailing lists are only in place five and have a lower market share than all modern chat systems combined.",https://doi.org/10.1145/3183440.3194951
13,"Rahman, Mohammad Masudur and Roy, Chanchal K.",An Insight into the Pull Requests of GitHub,10.1145/2597073.2597121,2014,"Given the increasing number of unsuccessful pull requests in GitHub projects, insights into the success and failure of these requests are essential for the developers. In this paper, we provide a comparative study between successful and unsuccessful pull requests made to 78 GitHub base projects by 20,142 developers from 103,192 forked projects. In the study, we analyze pull request discussion texts, project specific information (e.g., domain, maturity), and developer specific information (e.g., experience) in order to report useful insights, and use them to contrast between successful and unsuccessful pull requests. We believe our study will help developers overcome the issues with pull requests in GitHub, and project administrators with informed decision making. ",https://doi.org/10.1145/2597073.2597121
15,"Bentley, Carmen A. and Gehringer, Edward F.",Promoting Collaborative Skills with Github Project Boards,10.1145/3328778.3372646,2020,"Teamwork skills are much in demand in the workplace, even more so with the growth of Agile methods. This calls for giving Computer Science students more practice in the kinds of team scenarios they will encounter on the job. Key for success are hands-on experience with planning methods, prioritization techniques, time management and organization. This poster shows how the cooperative tracking tool Github Project Boards helps teams strategize development, track progress, distribute work evenly, and facilitate collaboration. It also shows how instructors can use Github Project Boards to visualize and evaluate a team's development process.",https://doi.org/10.1145/3328778.3372646
22,"Bhattacharjee, Avijit and Nath, Sristy Sumana and Zhou, Shurui and Chakroborti, Debasish and Roy, Banani and Roy, Chanchal K. and Schneider, Kevin",An Exploratory Study to Find Motives Behind Cross-Platform Forks from Software Heritage Dataset,10.1145/3379597.3387512,2020,"The fork-based development mechanism provides the flexibility and the unified processes for software teams to collaborate easily in a distributed setting without too much coordination overhead. Currently, multiple social coding platforms support fork-based development, such as GitHub, GitLab, and Bitbucket. Although these different platforms virtually share the same features, they have different emphasis. As GitHub is the most popular platform and the corresponding data is publicly available, most of the current studies are focusing on GitHub hosted projects. However, we observed anecdote evidences that people are confused about choosing among these platforms, and some projects are migrating from one platform to another, and the reasons behind these activities remain unknown. With the advances of Software Heritage Graph Dataset (SWHGD), we have the opportunity to investigate the forking activities across platforms. In this paper, we conduct an exploratory study on 10 popular open-source projects to identify cross-platform forks and investigate the motivation behind. Preliminary result shows that cross-platform forks do exist. For the 10 subject systems used in this study, we found 81,357 forks in total among which 179 forks are on GitLab. Based on our qualitative analysis, we found that most of the cross-platform forks that we identified are mirrors of the repositories on another platform, but we still find cases that were created due to preference of using certain functionalities (e.g. Continuous Integration (CI)) supported by different platforms. This study lays the foundation of future research directions, such as understanding the differences between platforms and supporting cross-platform collaboration.",https://doi.org/10.1145/3379597.3387512
23,"Brown, Chris and Parnin, Chris",Understanding the Impact of GitHub Suggested Changes on Recommendations between Developers,10.1145/3368089.3409722,2020,"Recommendations between colleagues are effective for encouraging developers to adopt better practices. Research shows these peer interactions are useful for improving developer behaviors, or the adoption of activities to help software engineers complete programming tasks. However, in-person recommendations between developers in the workplace are declining. One form of online recommendations between developers are pull requests, which allow users to propose code changes and provide feedback on contributions. GitHub, a popular code hosting platform, recently introduced the suggested changes feature, which allows users to recommend improvements for pull requests. To better understand this feature and its impact on recommendations between developers, we report an empirical study of this system, measuring usage, effectiveness, and perception. Our results show that suggested changes support code review activities and significantly impact the timing and communication between developers on pull requests. This work provides insight into the suggested changes feature and implications for improving future systems for automated developer recommendations, such as providing situated, concise, and actionable feedback.",https://doi.org/10.1145/3368089.3409722
25,"Kikas, Riivo and Dumas, Marlon and Pfahl, Dietmar",Issue Dynamics in Github Projects,10.1007/978-3-319-26844-6_22,2015,"Issue repositories are used to keep of track of bugs, development tasks and feature requests in software development projects. In the case of open source projects, everyone can submit a new issue in the tracker. This practice can lead to situations where more issues are created than what can be effectively handled by the project members, raising the question of how issues are treated as the capacity of the project members is exceeded. In this paper, we study the temporal dynamics of issues in a popular open source development platform, namely Github, based on a sample of 4000 projects. We specifically analyze how the rate of issue creation, the amount of pending issues, and their average lifetime evolve over the course of time. The results show that more issues are opened shortly after the creation of a project repository and that the amount of pending issues increases inexorably due to forgotten unclosed issues. Yet, the average issue lifetime for issues that do get closed is relatively stable over time. These observations suggest that Github projects have implicit mechanisms for handling issues perceived to be important to the project, while neglecting those that exceed the project's capacity.",https://doi.org/10.1007/978-3-319-26844-6_22
26,"Zhou, Shurui and Vasilescu, Bogdan and K\""astner, Christian",What the Fork: A Study of Inefficient and Efficient Forking Practices in Social Coding,10.1145/3338906.3338918,2019,"Forking and pull requests have been widely used in open-source communities as a uniform development and contribution mechanism, giving developers the flexibility to modify their own fork without affecting others before attempting to contribute back. However, not all projects use forks efficiently; many experience lost and duplicate contributions and fragmented communities. In this paper, we explore how open-source projects on GitHub differ with regard to forking inefficiencies. First, we observed that different communities experience these inefficiencies to widely different degrees and interviewed practitioners to understand why. Then, using multiple regression modeling, we analyzed which context factors correlate with fewer inefficiencies.We found that better modularity and centralized management are associated with more contributions and a higher fraction of accepted pull requests, suggesting specific best practices that project maintainers can adopt to reduce forking-related inefficiencies in their communities.",https://doi.org/10.1145/3338906.3338918
28,"Stanciulescu, Stefan and Schulze, Sandro and Wasowski, Andrzej",Forked and Integrated Variants in an Open-Source Firmware Project,10.1109/ICSM.2015.7332461,2015,"Code cloning has been reported both on small (code fragments) and large (entire projects) scale. Cloning-in-the-large, or forking, is gaining ground as a reuse mechanism thanks to availability of better tools for maintaining forked project variants, hereunder distributed version control systems and interactive source management platforms such as Github. We study advantages and disadvantages of forking using the case of Marlin, an open source firmware for 3D printers. We find that many problems and advantages of cloning do translate to forking. Interestingly, the Marlin community uses both forking and integrated variability management (conditional compilation) to create variants and features. Thus, studying it increases our understanding of the choice between integrated and clone-based variant management. It also allows us to observe mechanisms governing source code maturation, in particular when, why and how feature implementations are migrated from forks to the main integrated platform. We believe that this understanding will ultimately help development of tools mixing clone-based and integrated variant management, combining the advantages of both.",https://doi.org/10.1109/ICSM.2015.7332461
32,"Pietri, Antoine and Rousseau, Guillaume and Zacchiroli, Stefano",Forking Without Clicking: On How to Identify Software Repository Forks,10.1145/3379597.3387450,2020,"The notion of software ""fork"" has been shifting over time from the (negative) phenomenon of community disagreements that result in the creation of separate development lines and ultimately software products, to the (positive) practice of using distributed version control system (VCS) repositories to collaboratively improve a single product without stepping on each others toes. In both cases the VCS repositories participating in a fork share parts of a common development history.Studies of software forks generally rely on hosting platform metadata, such as GitHub, as the source of truth for what constitutes a fork. These ""forge forks"" however can only identify as forks repositories that have been created on the platform, e.g., by clicking a ""fork"" button on the platform user interface. The increased diversity in code hosting platforms (e.g., GitLab) and the habits of significant development communities (e.g., the Linux kernel, which is not primarily hosted on any single platform) call into question the reliability of trusting code hosting platforms to identify forks. Doing so might introduce selection and methodological biases in empirical studies.In this article we explore various definitions of ""software forks"", trying to capture forking workflows that exist in the real world. We quantify the differences in how many repositories would be identified as forks on GitHub according to the various definitions, confirming that a significant number could be overlooked by only considering forge forks. We study the structure and size of fork networks, observing how they are affected by the proposed definitions and discuss the potential impact on empirical research.",https://doi.org/10.1145/3379597.3387450
33,"Ford, Denae and Behroozi, Mahnaz and Serebrenik, Alexander and Parnin, Chris",Beyond the Code Itself: How Programmers <i>Really</i> Look at Pull Requests,10.1109/ICSE-SEIS.2019.17,2019,"Developers in open source projects must make decisions on contributions from other community members, such as whether or not to accept a pull request. However, secondary factors---beyond the code itself---can influence those decisions. For example, signals from GitHub profiles, such as a number of followers, activity, names, or gender can also be considered when developers make decisions. In this paper, we examine how developers use these signals (or not) when making decisions about code contributions. To evaluate this question, we evaluate how signals related to perceived gender identity and code quality influenced decisions on accepting pull requests. Unlike previous work, we analyze this decision process with data collected from an eye-tracker. We analyzed differences in what signals developers said are important for themselves versus what signals they actually used to make decisions about others. We found that after the code snippet (x = 57%), the second place programmers spent their time ixating is on supplemental technical signals (x = 32%), such as previous contributions and popular repositories. Diverging from what participants reported themselves, we also found that programmers ixated on social signals more than recalled.",https://doi.org/10.1109/ICSE-SEIS.2019.17
67,"Jiang, J., Lo, D., He, J., Xia, X., Kochhar, P.S., Zhang, L.",Why and how developers fork what from whom in GitHub,10.1007/s10664-016-9436-6,2017,"",https://doi.org/10.1007/s10664-016-9436-6
43,"Sheoran, Jyoti and Blincoe, Kelly and Kalliamvakou, Eirini and Damian, Daniela and Ell, Jordan","Understanding ""Watchers"" on GitHub",10.1145/2597073.2597114,2014,"Users on GitHub can watch repositories to receive notifications about project activity. This introduces a new type of passive project membership. In this paper, we investigate the behavior of watchers and their contribution to the projects they watch. We find that a subset of project watchers begin contributing to the project and those contributors account for a significant percentage of contributors on the project. As contributors, watchers are more confident and contribute over a longer period of time in a more varied way than other contributors. This is likely attributable to the knowledge gained through project notifications. ",https://doi.org/10.1145/2597073.2597114
44,"Destefanis, Giuseppe and Ortu, Marco and Bowes, David and Marchesi, Michele and Tonelli, Roberto",On Measuring Affects of Github Issues' Commenters,10.1145/3194932.3194936,2018,"In this study, we analyzed issues and comments on GitHub projects and built collaboration networks dividing contributors into two categories: users and commenters. We identified as commenters those users who only post comments without posting any issues nor committing changes in the source code. Since previous studies showed that there is a link between a positive environment (regarding affectiveness) and productivity, our goal was to investigate commenters' contribution to the project concerning affectiveness.We analyzed more than 370K comments from 100K issues of 25K contributors from 3 open source projects. We then calculated and compared the affectiveness of the issues' comments written by users and commenters in terms of sentiment, politeness, and emotions. We provide empirical evidence that commenters are less polite, less positive and in general they express a lower level of emotions in their comments than users. Our results also confirm that GitHub's contributors consist of different groups which behave differently, and this provides useful information for future studies in the field.",https://doi.org/10.1145/3194932.3194936
46,"Tan, Xin and Zhou, Minghui and Sun, Zeyu",A First Look at Good First Issues on GitHub,10.1145/3368089.3409746,2020,"Keeping a good influx of newcomers is critical for open source software projects' survival, while newcomers face many barriers to contributing to a project for the first time. To support newcomers onboarding, GitHub encourages projects to apply labels such as good first issue (GFI) to tag issues suitable for newcomers. However, many newcomers still fail to contribute even after many attempts, which not only reduces the enthusiasm of newcomers to contribute but makes the efforts of project members in vain. To better support the onboarding of newcomers, this paper reports a preliminary study on this mechanism from its application status, effect, problems, and best practices. By analyzing 9,368 GFIs from 816 popular GitHub projects and conducting email surveys with newcomers and project members, we obtain the following results. We find that more and more projects are applying this mechanism in the past decade, especially the popular projects. Compared to common issues, GFIs usually need more days to be solved. While some newcomers really join the projects through GFIs, almost half of GFIs are not solved by newcomers. We also discover a series of problems covering mechanism (e.g., inappropriate GFIs), project (e.g., insufficient GFIs) and newcomer (e.g., uneven skills) that makes this mechanism ineffective. We discover the practices that may address the problems, including identifying GFIs that have informative description and available support, and require limited scope and skill, etc. Newcomer onboarding is an important but challenging question in open source projects and our work enables a better understanding of GFI mechanism and its problems, as well as highlights ways in improving them.",https://doi.org/10.1145/3368089.3409746
51,"Tsay, Jason and Dabbish, Laura and Herbsleb, James",Let's Talk about It: Evaluating Contributions through Discussion in GitHub,10.1145/2635868.2635882,2014,"Open source software projects often rely on code contributions from a wide variety of developers to extend the capabilities of their software. Project members evaluate these contributions and often engage in extended discussions to decide whether to integrate changes. These discussions have important implications for project management regarding new contributors and evolution of project requirements and direction. We present a study of how developers in open work environments evaluate and discuss pull requests, a primary method of contribution in GitHub, analyzing a sample of extended discussions around pull requests and interviews with GitHub developers. We found that developers raised issues around contributions over both the appropriateness of the problem that the submitter attempted to solve and the correctness of the implemented solution. Both core project members and third-party stakeholders discussed and sometimes implemented alternative solutions to address these issues. Different stakeholders also influenced the outcome of the evaluation by eliciting support from different communities such as dependent projects or even companies. We also found that evaluation outcomes may be more complex than simply acceptance or rejection. In some cases, although a submitter's contribution was rejected, the core team fulfilled the submitter's technical goals by implementing an alternative solution. We found that the level of a submitter's prior interaction on a project changed how politely developers discussed the contribution and the nature of proposed alternative solutions. ",https://doi.org/10.1145/2635868.2635882
53,"Zhang, Yang and Yin, Gang and Yu, Yue and Wang, Huaimin",Investigating Social Media in GitHub's Pull-Requests: A Case Study on Ruby on Rails,10.1145/2666539.2666572,2014,"In GitHub, pull-request mechanism is an outstanding social development method by integrating with many social media. Many studies have explored that social media has an important effect on software development. @-mention as a typical social media, is a useful tool in social platform. In this paper, we made a quantitative analysis of @-mention in pull-requests of the project Ruby on Rails. First, we make a convictive statistics of the popularity of pull-request mechanism in GitHub. Then we investigate the current situation of @-mention in the Ruby on Rails. Our empirical analysis results find some insights of @-mention. ",https://doi.org/10.1145/2666539.2666572
55,"Zhang, Yang and Yin, Gang and Yu, Yue and Wang, Huaimin",A Exploratory Study of @-Mention in GitHub's Pull-Requests,10.1109/APSEC.2014.58,2014,"Pull-request mechanism is an outstanding social development method in Git Hub. @-mention is a social media tool that deeply integrated with pull-request mechanism. Recently, many research results show that social media tools can promote the collaborative software development, but few work focuses on the impacts of @-mention. In this paper, we conduct an exploratory study of @-mention in pull-request based software development, including its current situation and benefits. We obtain some interesting findings which indicate that @-mention is beneficial to the processing of pull-request. Our work also proposes some possible research directions and problems of the @-mention. It helps the developers and researchers notice the significance of @-mention in the pull-request based software development.",https://doi.org/10.1109/APSEC.2014.58
59,"Zhou, Shurui and Vasilescu, Bogdan and K\""astner, Christian",How Has Forking Changed in the Last 20 Years? A Study of Hard Forks on GitHub,10.1145/3377811.3380412,2020,"The notion of forking has changed with the rise of distributed version control systems and social coding environments, like GitHub. Traditionally forking refers to splitting off an independent development branch (which we call hard forks); research on hard forks, conducted mostly in pre-GitHub days showed that hard forks were often seen critical as they may fragment a community Today, in social coding environments, open-source developers are encouraged to fork a project in order to contribute to the community (which we call social forks), which may have also influenced perceptions and practices around hard forks. To revisit hard forks, we identify, study, and classify 15,306 hard forks on GitHub and interview 18 owners of hard forks or forked repositories. We find that, among others, hard forks often evolve out of social forks rather than being planned deliberately and that perception about hard forks have indeed changed dramatically, seeing them often as a positive noncompetitive alternative to the original project.",https://doi.org/10.1145/3377811.3380412
66,Yang Zhang and,Social media in GitHub: the role of @-mention in assisting software,10.1007/s11432-015-1024-6,2017,"",https://doi.org/10.1007/s11432-015-1024-6
69,"Jiang, J. and Wu, Q. and Cao, J. and Xia, X. and Zhang, L.",Recommending tags for pull requests in GitHub,10.1016/j.infsof.2020.106394,2021,"",https://www.scopus.com/inward/record.uri?eid=2-s2.0-85092068193&doi=10.1016%2fj.infsof.2020.106394&partnerID=40&md5=4ee8a71e5e67bc61a40e84464506400e
70,"Utomo, P. and Falahah",Building Serverless Website on GitHub Pages,10.1088/1757-899X/879/1/012077,2020,"",https://www.scopus.com/inward/record.uri?eid=2-s2.0-85091346359&doi=10.1088%2f1757-899X%2f879%2f1%2f012077&partnerID=40&md5=a42a4e51229c007d6a3f1d1c6a969772
71,"Zhang, Y. and Wang, H. and Wu, Y. and Hu, D. and Wang, T.",GitHub's milestone tool: A mixed-methods analysis on its use,10.1002/smr.2229,2020,"",https://www.scopus.com/inward/record.uri?eid=2-s2.0-85075388288&doi=10.1002%2fsmr.2229&partnerID=40&md5=491143dfea220852a144e812cc022ee9
84,"Wang, W., Poo-Caamaño, G., Wilde, E., German, D.M.",What is the GIST? Understanding the use of public gists on GitHub,10.1109/MSR.2015.36,2015,"GitHub is a popular source code hosting site which serves as a collaborative coding platform. The many features of GitHub have greatly facilitated developers' collaboration, communication, and coordination. Gists are one feature of GitHub, which defines them as 'a simple way to share snippets and pastes with others.' This three-part study explores how users are using Gists. The first part is a quantitative analysis of Gist metadata and contents. The second part investigates the information contained in a Gist: We sampled 750k users and their Gists (totalling 762k Gists), then manually categorized the contents of 398. The third part of the study investigates what users are saying Gists are for by reading the contents of web pages and twitter feeds. The results indicate that Gists are used by a small portion of GitHub users, and those that use them typically only have a few. We found that Gists are usually small and composed of a single file. However, Gists serve a wide variety of uses, from saving snippets of code, to creating reusable components for web pages. © 2015 IEEE.",https://ieeexplore.ieee.org/document/7180090
