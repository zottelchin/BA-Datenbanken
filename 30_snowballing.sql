--
-- PostgreSQL database dump
--

-- Dumped from database version 13.1 (Debian 13.1-1.pgdg100+1)
-- Dumped by pg_dump version 13.1 (Debian 13.1-1.pgdg100+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: snowballing; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.snowballing (
    id integer NOT NULL,
    author text,
    title text,
    doi text,
    year text,
    abstract text,
    url text
);


ALTER TABLE public.snowballing OWNER TO postgres;

--
-- Name: snowballing_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.snowballing_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.snowballing_id_seq OWNER TO postgres;

--
-- Name: snowballing_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.snowballing_id_seq OWNED BY public.snowballing.id;


--
-- Name: snowballing id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.snowballing ALTER COLUMN id SET DEFAULT nextval('public.snowballing_id_seq'::regclass);


--
-- Data for Name: snowballing; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.snowballing (id, author, title, doi, year, abstract, url) FROM stdin;
1	Alexey Zagalsky, Joseph Feliciano, Margaret-Anne Storey, Yiyun Zhao, Weiliang Wang	The Emergence of GitHub as a Collaborative Platform forEducation	10.1145/2675133.2675284	2015	The software development community has embraced GitHubas an essential platform for managing their software projects.GitHub has created efficiencies and helped improve the waysoftware professionals work. It not only provides a traceableproject  repository,  but  it  acts  as  a  social  meeting  place  forinterested parties,  supporting communities of practice.   Re-cently, educators have seen the potential in GitHub’s collab-orative features for managing and improving—perhaps eventransforming—the learning experience.In this study, we examine how GitHub is emerging as a col-laborative platform for education. We aim to understand howenvironments such as GitHub—environments that provide so-cial and collaborative features in conjunction with distributedversion control—may improve (or possibly hinder) the edu-cational  experience  for  students  and  teachers.   We  conducta  qualitative  study  focusing  on  how  GitHub  is  being  usedin education, and the motivations, benefits and challenges itbrings.	http://dx.doi.org/10.1145/2675133.2675284
2	T. F. Bissyandé, D. Lo, L. Jiang, L. Réveillère, J. Klein and Y. L. Traon	Got issues? Who cares about it? A large scale investigation of issue trackers from GitHub	10.1109/ISSRE.2013.6698918	2013	Feedback from software users constitutes a vital part in the evolution of software projects. By filing issue reports, users help identify and fix bugs, document software code, and enhance the software via feature requests. Many studies have explored issue reports, proposed approaches to enable the submission of higher-quality reports, and presented techniques to sort, categorize and leverage issues for software engineering needs. Who, however, cares about filing issues? What kind of issues are reported in issue trackers? What kind of correlation exist between issue reporting and the success of software projects? In this study, we address the need for answering such questions by performing an empirical study on a hundred thousands of open source projects. After filtering relevant trackers, the study used about 20,000 projects. We investigate and answer various research questions on the popularity and impact of issue trackers.	https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6698918&isnumber=6698873
3	Miroslav Tushev, Grant Williams & Anas Mahmoud	Using GitHub in large software engineering classes. An exploratory case study	10.1080/08993408.2019.1696168	2020	Background and Context: GitHub has been recently used in Software Engineering (SE) classes to facilitate collaboration in student team projects as well as help teachers to evaluate the contributions of their students more objectively. Objective: We explore the benefits and drawbacks of using GitHub as a means for team collaboration and performance evaluation in large SE classes. Method: Our research method takes the form of a case study conducted in a senior level SE class with 91 students. Our study also includes entry and exit surveys, an exit interview, and a qualitative analysis of students’ commit behavior. Findings: Different teams adapt GitHub to their workflow differently. Furthermore, despite the steep learning curve, using GitHub should not affect the quality of students’ submissions. However, using GitHub metrics as a proxy for evaluating team performance can be risky. Implications: We provide several recommendations for integrating Web-based configuration management tools in SE classes. © 2019, © 2019 Informa UK Limited, trading as Taylor & Francis Group.	https://doi.org/10.1080/08993408.2019.1696168
4	Jordi Cabot, Javier Luis C ́anovas Izquierdo, Valerio Cosentino, Bel ́en Rolandi	Exploring the use of labels to categorize issues in Open-Source Software projects	10.1109/SANER.2015.7081875	2015	Reporting bugs, asking for new features and in general giving any kind of feedback is a common way to contribute to an Open-Source Software (OSS) project. This feedback is generally reported in the form of new issues for the project, managed by the so-called issue-trackers. One of the features provided by most issue-trackers is the possibility to define a set of labels/tags to classify the issues and, at least in theory, facilitate their management. Nevertheless, there is little empirical evidence to confirm that taking the time to categorize new issues has indeed a beneficial impact on the project evolution. In this paper we analyze a population of more than three million of GitHub projects and give some insights on how labels are used in them. Our preliminary results reveal that, even if the label mechanism is scarcely used, using labels favors the resolution of issues. Our analysis also suggests that not all projects use labels in the same way (e.g., for some labels are only a way to prioritize the project while others use them to signal their temporal evolution as they move along in the development workflow). Further research is needed to precisely characterize these label families and learn more the ideal application scenarios for each of them. © 2015 IEEE.	https://ieeexplore.ieee.org/document/7081875
5	Lee, Michael J. and Ferwerda, Bruce and Choi, Junghong and Hahn, Jungpil and Moon, Jae Yun and Kim, Jinwoo	GitHub Developers Use Rockstars to Overcome Overflow of News	10.1145/2468356.2468381	2013	Keeping track of a constantly updating stream of news items on social networking enabled software development sites may be difficult. We analyzed the actions of 544 GitHub.com developers working across 5,657 projects to examine how the network of developers and projects influence where developers choose to contribute. Our analyses revealed the existence of a group of extremely well connected developers, or rockstars. We found that these rockstars': 1) actions have a greater influence on their followers compared to regular developers, 2) type of action affect their followers differently, 3) influence on followers may depend on a project's age, 4) increased activity on a project increases activity by followers, and 5) followers use as guides to projects to work on. We discuss the implications of these findings to the design of software development environments.	https://doi.org/10.1145/2468356.2468381
6	Gousios, Georgios and Pinzger, Martin and Deursen, Arie van	An exploratory study of the pull-based software development model	10.1145/2568225.2568260	2014	The advent of distributed version control systems has led to the development of a new paradigm for distributed software development; instead of pushing changes to a central repository, developers pull them from other repositories and merge them locally. Various code hosting sites, notably Github, have tapped on the opportunity to facilitate pull-based development by offering workflow support tools, such as code reviewing systems and integrated issue trackers. In this work, we explore how pull-based software development works, first on the GHTorrent corpus and then on a carefully selected sample of 291 projects. We find that the pull request model offers fast turnaround, increased opportunities for community engagement and decreased time to incorporate contributions. We show that a relatively small number of factors affect both the decision to merge a pull request and the time to process it. We also examine the reasons for pull request rejection and find that technical ones are only a small minority. © 2014 ACM.	https://doi.org/10.1145/2568225.2568260
7	Yang Zhang; Gang Yin; Yue Yu; Huaimin Wang	A Exploratory Study of @-Mention in GitHubs Pull-Requests	 10.1109/APSEC.2014.58	2014	Pull-request mechanism is an outstanding social development method in Git Hub. @-mention is a social media tool that deeply integrated with pull-request mechanism. Recently, many research results show that social media tools can promote the collaborative software development, but few work focuses on the impacts of @-mention. In this paper, we conduct an exploratory study of @-mention in pull-request based software development, including its current situation and benefits. We obtain some interesting findings which indicate that @-mention is beneficial to the processing of pull-request. Our work also proposes some possible research directions and problems of the @-mention. It helps the developers and researchers notice the significance of @-mention in the pull-request based software development.	https://ieeexplore.ieee.org/document/7091329
8	Yang Zhang , Gang Yin , Yue Yu , Huaimin Wang	Investigating social media in GitHubs pull-requests: a case study on Ruby on Rails	10.1145/2666539.2666572	2014	In GitHub, pull-request mechanism is an outstanding social development method by integrating with many social media. Many studies have explored that social media has an important effect on software development. @-mention as a typical social media, is a useful tool in social platform. In this paper, we made a quantitative analysis of @-mention in pull-requests of the project Ruby on Rails. First, we make a convictive statistics of the popularity of pull-request mechanism in GitHub. Then we investigate the current situation of @-mention in the Ruby on Rails. Our empirical analysis results find some insights of @-mention. 	https://doi.org/10.1145/2666539.2666572
9	Yang Zhang, Huaimin Wang, Yiwen Wu, Dongyang Hu, Tao Wang	GitHubs milestone tool: A mixed-methods analysis on its use	10.1002/smr.2229	2020	Social coding site GitHub provides developers with many management tools to facilitate project maintenance and developer collaboration. Milestone tool, in particular, plays an important role in organizing and tracking progress on groups of issues or pull requests in a project. However, few research has analyzed the milestone tool, even though it has been used in practice for a long time. In this paper, we want to address this literature gap and present an ongoing work aimed at investigating the use of the milestone tool in GitHub open-source projects. We conduct a mixed-methods analysis in a large-scale dataset of GitHub projects, to help developers gain some insights into the milestone tool, including its usage, benefits, and limitations. We quantitatively investigate the basic adoption of milestone tool and its correlation with project properties. We also survey developers to understand the reasons for using milestone tool or not and their perceptions of the milestone tool. We find that certain types of projects use milestone tool more than others. Adopting the milestone tool is associated with more commits, more releases, and more project popularity, but the current milestone tool also has some limitations. These observations can then be forwarded to the GitHub community for follow-up and can result in them potentially making a better milestone tool. © 2019 John Wiley & Sons, Ltd.	https://doi.org/10.1002/smr.2229
10	 Kavaler, D., Devanbu, P., Filkov, V.	Whom are you going to call? determinants of @-mentions in Github discussions	10.1007/s10664-019-09728-3	2019	Open Source Software (OSS) project success relies on crowd contributions. When an issue arises in pull-request based systems, @-mentions are used to call on people to task; previous studies have shown that @-mentions in discussions are associated with faster issue resolution. In most projects there may be many developers who could technically handle a variety of tasks. But OSS supports dynamic teams distributed across a wide variety of social and geographic backgrounds, as well as levels of involvement. It is, then, important to know whom to call on, i.e., who can be relied or trusted with important task-related duties, and why. In this paper, we sought to understand which observable socio-technical attributes of developers can be used to build good models of them being future @-mentioned in GitHub issues and pull request discussions. We built overall and project-specific predictive models of future @-mentions, in order to capture the determinants of @-mentions in each of two hundred GitHub projects, and to understand if and how those determinants differ between projects. We found that visibility, expertise, and productivity are associated with an increase in @-mentions, while responsiveness is not, in the presence of a number of control variables. Also, we find that though project-specific differences exist, the overall model can be used for cross-project prediction, indicating its GitHub-wide utility. © 2019, Springer Science+Business Media, LLC, part of Springer Nature.	https://link.springer.com/article/10.1007%2Fs10664-019-09728-3
11	Neto, C.C.M., De Barros, M.O.	A structured survey on the usage of the issue tracking system provided by the GitHub platform	10.1145/3132498.3134110	2017	Issue tracking systems help software development teams in identifying problems to be solved and new features to be added to a software system. In this paper, we replicate and extend a study carried out in 2013 on the usage of the issue tracking system provided by the GitHub platform. The replication aims at determining whether the results observed four years ago are still valid. The extension seeks to analyze how often issues are terminated by commits to the version control system and understand whether this feature allows developers to relate an issue to the source code modules that were changed to resolve it. We conclude that the results of the previous study remain valid and that issues closed by commits are uncommon (about 4% of our sample) and often linked to technical aspects of the project.	https://doi.org/10.1145/3132498.3134110
12	Jiang, J., Lo, D., He, J., Xia, X., Kochhar, P.S., Zhang, L.	Why and how developers fork what from whom in GitHub	10.1007/s10664-016-9436-6	2017		https://doi.org/10.1007/s10664-016-9436-6
13	Borges, H., Tulio Valente, M.	What's in a GitHub Star? Understanding Repository Starring Practices in a Social Coding Platform	10.1016/j.jss.2018.09.016	2018	Besides a git-based version control system, GitHub integrates several social coding features. Particularly, GitHub users can star a repository, presumably to manifest interest or satisfaction with an open source project. However, the real and practical meaning of starring a project was never the subject of an in-depth and well-founded empirical investigation. Therefore, we provide in this paper a throughout study on the meaning, characteristics, and dynamic growth of GitHub stars. First, by surveying 791 developers, we report that three out of four developers consider the number of stars before using or contributing to a GitHub project. Then, we report a quantitative analysis on the characteristics of the top-5,000 most starred GitHub repositories. We propose four patterns to describe stars growth, which are derived after clustering the time series representing the number of stars of the studied repositories; we also reveal the perception of 115 developers about these growth patterns. To conclude, we provide a list of recommendations to open source project managers (e.g., on the importance of social media promotion) and to GitHub users and Software Engineering researchers (e.g., on the risks faced when selecting projects by GitHub stars). © 2018 Elsevier Inc.	https://www.sciencedirect.com/science/article/abs/pii/S0164121218301961?via%3Dihub
14	Robles, G., González-Barahona, J.M.	A comprehensive study of software forks: Dates, reasons and outcomes	10.1007/978-3-642-33442-9_1	2012	In general it is assumed that a software product evolves within the authoring company or group of developers that develop the project. However, in some cases different groups of developers make the software evolve in different directions, a situation which is commonly known as a fork. In the case of free software, although forking is a practice that is considered as a last resort, it is inherent to the four freedoms. This paper tries to shed some light on the practice of forking. Therefore, we have identified significant forks, several hundreds in total, and have studied them in depth. Among the issues that have been analyzed for each fork is the date when the forking occurred, the reason of the fork, and the outcome of the fork, i.e., if the original or the forking project are still developed. Our investigation shows, among other results, that forks occur in every software domain, that they have become more frequent in recent years, and that very few forks merge with the original project. © 2012 IFIP International Federation for Information Processing.	https://link.springer.com/chapter/10.1007%2F978-3-642-33442-9_1
15	Zhou, S., Vasilescu, B., Kästner, C. 	How has forking changed in the last 20 years? a study of hard forks on github	10.1145/3377812.3390911	2020	The notion of forking has changed with the rise of distributed version control systems and social coding environments, like GitHub.Traditionally forking refers to splitting off an independent development branch (which we call hard forks); research on hard forks,conducted mostly in pre-GitHub days showed that hard forks wereoften seen critical as they may fragment a community. Today, in social coding environments, open-source developers are encouragedto fork a project in order to contribute to the community (whichwe call social forks), which may have also influenced perceptionsand practices around hard forks. To revisit hard forks, we identify,study, and classify 15,306 hard forks on GitHub and interview 18owners of hard forks or forked repositories. We find that, amongothers, hard forks often evolve out of social forks rather than beingplanned deliberately and that perception about hard forks haveindeed changed dramatically, seeing them often as a positive noncompetitive alternative to the original project. © 2020 Copyright held by the owner/author(s).	https://dl.acm.org/doi/10.1145/3377812.3390911
16	Zhou, S., Vasilescu, B., Kästner, C. 	What the fork: A study of inefficient and efficient forking practices in social coding	10.1145/3338906.3338918	2019	Forking and pull requests have been widely used in open-source communities as a uniform development and contribution mechanism, giving developers the flexibility to modify their own fork without affecting others before attempting to contribute back. However, not all projects use forks efficiently; many experience lost and duplicate contributions and fragmented communities. In this paper, we explore how open-source projects on GitHub differ with regard to forking inefficiencies. First, we observed that different communities experience these inefficiencies to widely different degrees and interviewed practitioners to understand why. Then, using multiple regression modeling, we analyzed which context factors correlate with fewer inefficiencies.We found that better modularity and centralized management are associated with more contributions and a higher fraction of accepted pull requests, suggesting specific best practices that project maintainers can adopt to reduce forking-related inefficiencies in their communities. © 2019 ACM.	https://dl.acm.org/doi/10.1145/3338906.3338918
17	Lisha Li; Zhilei Ren; Xiaochen Li; Weiqin Zou; He Jiang	How Are Issue Units Linked? Empirical Study on the Linking Behavior in GitHub	10.1109/APSEC.2018.00053	2018	Issue reports and Pull Requests (PRs) are two important kinds of artifacts of software projects in GitHub. It is common for developers to leave explicit links in issues/PRs that refer to the other issues/PRs during discussions. Existing studies have demonstrated the value of such links in identifying complex bugs and duplicate issue reports. However, there are no broad examinations of why developers leave links within issues/PRs and the potential impact of such links on software development. Without such knowledge, practitioners and researchers may miss various opportunities to develop practical techniques for better solving bug-fixing or feature implementation related tasks. To fill this gap, we conducted the first empirical study to explore the characteristics of a large number of links within 642,281 issues/PRs of 16,584 popular (>50 stars) Python projects in GitHub. Specifically, we first constructed an Issue Unit Network (IUN, we refer to issue reports or PRs as issue units) by making use of the links between issue units. Then, we manually checked a sample of 1,384 links in the IUN and concluded six major kinds of linking relationships between issue units. For each kind of linking relationships, we presented some common patterns that developers usually adopted while linking issue units. By further analyzing as many as 423,503 links that match these common patterns, we found several interesting findings which indicate potential research directions in the future, including detecting cross-project duplicate issue reports, using IUN to help better identify influential projects and core issue reports.	https://ieeexplore.ieee.org/document/8719531
18	Pietri, A., Rousseau, G., Zacchiroli, S.	Forking without Clicking: On How to Identify Software Repository Forks	10.1145/3379597.3387450	2020	The notion of software "fork" has been shifting over time from the (negative) phenomenon of community disagreements that result in the creation of separate development lines and ultimately software products, to the (positive) practice of using distributed version control system (VCS) repositories to collaboratively improve a single product without stepping on each others toes. In both cases the VCS repositories participating in a fork share parts of a common development history.  Studies of software forks generally rely on hosting platform metadata, such as GitHub, as the source of truth for what constitutes a fork. These "forge forks" however can only identify as forks repositories that have been created on the platform, e.g., by clicking a "fork" button on the platform user interface. The increased diversity in code hosting platforms (e.g., GitLab) and the habits of significant development communities (e.g., the Linux kernel, which is not primarily hosted on any single platform) call into question the reliability of trusting code hosting platforms to identify forks. Doing so might introduce selection and methodological biases in empirical studies.  In this article we explore various definitions of "software forks", trying to capture forking workflows that exist in the real world. We quantify the differences in how many repositories would be identified as forks on GitHub according to the various definitions, confirming that a significant number could be overlooked by only considering forge forks. We study the structure and size of fork networks, observing how they are affected by the proposed definitions and discuss the potential impact on empirical research.	https://dl.acm.org/doi/10.1145/3379597.3387450
19	Zhang, Y., Wang, H., Yin, G., Wang, T., Yu, Y. 	Social media in GitHub: the role of @-mention in assisting software development	10.1007/s11432-015-1024-6	2016\r\n	Recently, many researches propose that social media tools can promote the collaboration among developers, which are beneficial to the software development. Nevertheless, there is little empirical evidence to confirm that using @-mention has indeed a beneficial impact on the issues in GitHub. In order to begin investigating such claim, we examine data from two large and successful projects hosted on GitHub, the Ruby on Rails and the AngularJS. By using qualitative and quantitative analysis, we give an in-depth understanding on how @-mention is used in the issues and the role of @-mention in assisting software development. Our statistical results indicate that, @-mention attracts more participants and tends to be used in the difficult issues. @-mention favors the solving process of issues by enlarging the visibility of issues and facilitating the developers’ collaboration. Our study also build an @-network based on the @-mention database we extracted. Through the @-network, we investigate its evolution over time and prove that we certainly have the potential to mine the relationships and characteristics of developers by exploiting the knowledge from the @-network. © 2016, Science China Press and Springer-Verlag Berlin Heidelberg.	https://link.springer.com/article/10.10072/s11432-015-1024-6
20	Zhang, Yang and Wang, Huaimin and Yin, Gang and Wang, Tao and Yu, Yue	Exploring the Use of @-Mention to Assist Software Development in GitHub	10.1145/2875913.2875914	2015	Recently, many researches propose that social media tools can promote the collaboration among developers, which are beneficial to the software development. Nevertheless, there is little empirical evidence to confirm that using @-mention has indeed a beneficial impact on the issues in GitHub. In this paper, we analyze the data from GitHub and give some insights on how @-mention is used in the issues (general-issues and pull-requests). Our statistical results indicate that, @-mention attracts more participants and tends to be used in the difficult issues. @-mention favors the solving process of issues by enlarging the visibility of issues and facilitating the developers' collaboration. In addition to this global study, our study also build a @-network based on the @-mention database we extract. Through the @-network, we can mine the relationships and characteristics of developers in GitHub's issues.	https://doi.org/10.1145/2875913.2875914
21	Wang, W., Poo-Caamaño, G., Wilde, E., German, D.M.	What is the GIST? Understanding the use of public gists on GitHub	10.1109/MSR.2015.36	2015	GitHub is a popular source code hosting site which serves as a collaborative coding platform. The many features of GitHub have greatly facilitated developers' collaboration, communication, and coordination. Gists are one feature of GitHub, which defines them as 'a simple way to share snippets and pastes with others.' This three-part study explores how users are using Gists. The first part is a quantitative analysis of Gist metadata and contents. The second part investigates the information contained in a Gist: We sampled 750k users and their Gists (totalling 762k Gists), then manually categorized the contents of 398. The third part of the study investigates what users are saying Gists are for by reading the contents of web pages and twitter feeds. The results indicate that Gists are used by a small portion of GitHub users, and those that use them typically only have a few. We found that Gists are usually small and composed of a single file. However, Gists serve a wide variety of uses, from saving snippets of code, to creating reusable components for web pages. © 2015 IEEE.	https://ieeexplore.ieee.org/document/7180090
\.


--
-- Name: snowballing_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.snowballing_id_seq', 21, true);


--
-- Name: snowballing snowballing_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.snowballing
    ADD CONSTRAINT snowballing_pkey PRIMARY KEY (id);


--
-- PostgreSQL database dump complete
--

